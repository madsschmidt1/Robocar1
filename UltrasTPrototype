import RPi.GPIO as GPIO
import time

# set GPIO numbering mode and define output pins
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

PWMA = 18
PWMB = 13
AIN1 = 4
AIN2 = 17
BIN1 = 22
BIN2 = 27

GPIO.setup(PWMA, GPIO.OUT, initial=0)
GPIO.setup(PWMB, GPIO.OUT, initial=0)
GPIO.setup(AIN1, GPIO.OUT)
GPIO.setup(AIN2, GPIO.OUT)
GPIO.setup(BIN1, GPIO.OUT)
GPIO.setup(BIN2, GPIO.OUT)

ECHO = 2
TRIG = 3

def initialization():
    GPIO.setup(ECHO, GPIO.IN)  # ECHO
    GPIO.setup(TRIG, GPIO.OUT)  # TRIG

initialization()
time.sleep(0.3)
print("Ultrasonic Measurement")
#GPIO.output(TRIG,GPIO.LOW)


def measure():
        echoTime = 0
        pingTime = 0

        time.sleep(0.35)
        GPIO.output(TRIG, GPIO.HIGH)
        time.sleep(0.00001)
        GPIO.output(TRIG, GPIO.LOW)
        echoTime = time.time()
        while GPIO.input(ECHO) == 0:
            pingTime = time.time()
        while GPIO.input(ECHO) == 1:
            echoTime = time.time()
        elapsedTime = echoTime - pingTime
        distance = elapsedTime * 17150  # 343m/s Speed of Sound
        distance = round(distance, 0)
        print(distance, " cm")
        return distance


def stop():
    GPIO.output(AIN1, False)
    GPIO.output(AIN2, False)
    GPIO.output(BIN1, False)
    GPIO.output(BIN2, False)


def forward():
    rightmotor = GPIO.PWM(PWMA, 50)  # channel=12 frequency=50Hz
    leftmotor = GPIO.PWM(PWMB, 50)
    rightmotor.start(100)
    leftmotor.start(100)

    GPIO.output(AIN1, GPIO.LOW)
    GPIO.output(AIN2, GPIO.HIGH)
    GPIO.output(BIN1, GPIO.LOW)
    GPIO.output(BIN2, GPIO.HIGH)

    rightmotor.ChangeDutyCycle(20)
    leftmotor.ChangeDutyCycle(20)
    #time it turns
    time.sleep(0.6)
    
    rightmotor.ChangeDutyCycle(40)
    leftmotor.ChangeDutyCycle(40)
    #time it turns
    time.sleep(2)#time.sleep(0.7)
    
    rightmotor.ChangeDutyCycle(70)
    leftmotor.ChangeDutyCycle(70)
    time.sleep(2)


    #time.sleep(1)

    # GPIO.output(AIN1, GPIO.LOW)#False)
    # GPIO.output(AIN2, GPIO.HIGH)#True)
    # GPIO.output(BIN1, GPIO.LOW)#False)
    # GPIO.output(BIN2, GPIO.HIGH)#True)


def back():
    GPIO.output(7, False)
    GPIO.output(11, True)
    GPIO.output(13, False)
    GPIO.output(15, True)


def left():
    GPIO.output(7, True)
    GPIO.output(11, False)
    GPIO.output(13, False)
    GPIO.output(15, True)


def right():
    GPIO.output(7, False)
    GPIO.output(11, True)
    GPIO.output(13, True)
    GPIO.output(15, False)


try:
    while True:
        distance = measure()
        #print("Distance :"  % distance)#%.1f
        #print("gpio12 ", GPIO.input(12))
        #print("gpio16 ", GPIO.input(16))
        #mb no sleep here? time.sleep(1)
        if distance <= 50:  # distance of object
            forward()
        # elif GPIO.input(12) and GPIO.input(16):  # IR1 & IR2  Use elif here
        #     stop()
        # elif GPIO.input(12):  # IR1
        #     right()
        # elif GPIO.input(16):  # IR2
        #     left()

        else:
            stop()
except KeyboardInterrupt:
    # cleanup the GPIO pins before ending
    GPIO.cleanup()
